generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["postgresqlExtensions", "typedSql"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  emailVerified  DateTime?
  hashedPassword String?
  role           UserRole        @default(MEMBER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  customizations Customization[]
  drafts         Draft[]
  subscription   Subscription?
  tokens         Token[]
  usageTracking  UsageTracking[]

  @@map("users")
}

model Token {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  type      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("tokens")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  tier                 SubscriptionTier   @default(FREE)
  status               SubscriptionStatus @default(ACTIVE)
  stripeCustomerId     String?            @unique
  stripeSubscriptionId String?            @unique
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@map("subscriptions")
}

model UsageTracking {
  id                  String   @id @default(cuid())
  userId              String
  aiEditsCount        Int      @default(0)
  customizationsCount Int      @default(0)
  schoolFetchesCount  Int      @default(0)
  periodStart         DateTime @default(now())
  periodEnd           DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([periodStart])
  @@index([periodEnd])
  @@map("usage_tracking")
}

model Draft {
  id             String          @id @default(cuid())
  userId         String
  name           String?
  promptText     String?         @db.Text
  content        String          @db.Text
  wordCount      Int
  tag            DraftTag        @default(IN_PROGRESS)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  customizations Customization[]
  versions       DraftVersion[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tag])
  @@index([createdAt])
  @@map("drafts")
}

model DraftVersion {
  id            String   @id @default(cuid())
  draftId       String
  content       String   @db.Text
  versionNumber Int
  changes       String?  @db.Text // JSON description of changes
  createdAt     DateTime @default(now())
  draft         Draft    @relation(fields: [draftId], references: [id], onDelete: Cascade)

  @@unique([draftId, versionNumber])
  @@index([draftId])
  @@index([createdAt])
  @@map("draft_versions")
}

model SchoolMajorData {
  id                  String    @id @default(cuid())
  schoolName          String
  majorName           String
  programDescription  String    @db.Text
  keyFeatures         String[]
  keywords            String[]  // Keep for hybrid search fallback

  // Vector embedding for semantic search
  embedding           Unsupported("vector(1536)")?
  embeddingModel      String?   @default("text-embedding-3-large")
  embeddingVersion    Int?      @default(1)
  lastEmbeddingUpdate DateTime?

  sourceUrl           String?
  lastUpdated         DateTime  @default(now())
  freshness           Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@unique([schoolName, majorName])
  @@index([schoolName])
  @@index([majorName])
  @@index([schoolName, majorName])
  @@index([lastUpdated])
  @@index([freshness])
  @@map("school_major_data")
}

model Customization {
  id                       String   @id @default(cuid())
  userId                   String
  draftId                  String
  schoolName               String
  majorName                String
  originalEssay            String   @db.Text
  customizedEssay          String   @db.Text

  // Metadata (structured JSON from AI response)
  metadata                 Json?
  wordCount                Int?
  meetsWordLimit           Boolean  @default(false)

  // Quality scores (1-10 scale)
  voicePreservationScore   Int?
  aiClicheAvoidanceScore   Int?
  alignmentScore           Int?

  // Performance metrics
  tokensUsed               Int?
  responseTime             Int      // milliseconds
  createdAt                DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  draft Draft @relation(fields: [draftId], references: [id], onDelete: Cascade)

  @@unique([draftId, schoolName, majorName])
  @@index([userId])
  @@index([draftId])
  @@index([createdAt])
  @@index([meetsWordLimit])
  @@map("customizations")
}

enum UserRole {
  ADMIN
  MEMBER
}

enum SubscriptionTier {
  FREE
  PLUS
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum DraftTag {
  IN_PROGRESS
  FINAL
  REVIEW
  ARCHIVED
}
